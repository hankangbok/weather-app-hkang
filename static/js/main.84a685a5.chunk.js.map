{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","WeatherDisplay","react_default","a","createElement","this","props","weather","maCity","React","Component","ReactionGif","_this","Object","classCallCheck","propsweather","possibleConstructorReturn","getPrototypeOf","call","state","gifButton","bind","assertThisInitialized","keyword","console","log","img","document","querySelector","fetch","mode","then","response","json","src","data","images","original","url","catch","error","alert","alt","LocationEntry","_this2","weatherDisplay","handleClick","gettheWeather","citySelected","getElementById","value","newURL","whichURL","cod","currentWeather","main","currentCity","name","setState","type","placeholder","id","onClick","src_WeatherDisplay","src_ReactionGif","PrettyHeader","TopLevelWeatherApp","className","src_PrettyHeader","src_LocationEntry","ReactDOM","render","src_TopLevelWeatherApp","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84a685a5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from './App';\nimport * as serviceWorker from \"./serviceWorker\";\n\nclass WeatherDisplay extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2>The current weather is {this.props.weather}</h2>\n        <h3>For the city of {this.props.maCity}</h3> \n      </div>\n    );\n  }\n}\nclass ReactionGif extends React.Component {\n  constructor(props) {\n    super(props);\n    let propsweather = this.props.weather;\n    this.state = {\n      weather: propsweather,\n      // imgKeyword: \"idk\"\n    };\n    this.gifButton = this.gifButton.bind(this);\n  }\n  gifButton(keyword) {\n    console.log(\"Looking for a gif thats descriptive of \"+keyword);\n    const img = document.querySelector('img');\n    fetch('https://api.giphy.com/v1/gifs/translate?api_key=utydx4ZJeUF4Ys1Bdn5Hp8nmF1EqLow6&s='\n      +keyword, {mode:'cors'})\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(response) {\n        img.src=response.data.images.original.url;\n      })\n      .catch(function(error) {\n        alert(\"No such Gif\");\n      })\n  }\n  \n  render() {\n    return (\n      <img alt=\"\" src={this.gifButton(this.state.weather)} />\n    );\n  }\n}\n\nclass LocationEntry extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weatherDisplay: \"Cats\",\n      maCity:\"Not Picked Yet\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.gettheWeather = this.gettheWeather.bind(this);\n  }\n  handleClick() {\n    // api.openweathermap.org/data/2.5/weather?q=London\n    console.log(\"HUHUHU\");\n  }\n\n  async gettheWeather() {\n    const url =\n      \"https://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=7433f086548c39db39d578affe769a25\";\n    const citySelected = document.getElementById(\"city-selected\").value;\n    console.log(citySelected);\n    const newURL= \"https://api.openweathermap.org/data/2.5/weather?q=\"\n      +citySelected\n      +\"&APPID=7433f086548c39db39d578affe769a25\";\n    const whichURL = (citySelected===0)? url : newURL;\n    const response = await fetch(whichURL, { mode: \"cors\" });\n    const data = await response.json();\n    if (data.cod === 200) {\n      console.log(data.cod);\n      // console.log(data.weather[0].main);\n      const currentWeather = data.weather[0].main;\n      const currentCity = data.name;\n      console.log(currentWeather);\n      console.log(currentCity +\"Is the city\");\n      this.setState({\n        weatherDisplay: currentWeather,\n        maCity: currentCity\n      });\n    } else {\n      alert(\"That is not a valid city name\");\n    }\n  }\n\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          placeholder=\"Please enter a city name\"\n          id=\"city-selected\"\n        />\n        <button type=\"button\" onClick={this.gettheWeather}>\n          {\" \"}\n          Enter the location for the weather you want\n        </button>\n        <WeatherDisplay weather={this.state.weatherDisplay} maCity={this.state.maCity} />\n        <ReactionGif weather={this.state.weatherDisplay} />\n      </form>\n    );\n  }\n}\n\nclass PrettyHeader extends React.Component {\n  render() {\n    return <header>Welcome to the Weather Page!</header>;\n  }\n}\n\nclass TopLevelWeatherApp extends React.Component {\n  render() {\n    return (\n      <div className=\"top-level-weather-app\">\n        <PrettyHeader />\n        <h1>This is the top level of the Weather App</h1>\n        <LocationEntry />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<TopLevelWeatherApp />, document.getElementById(\"root\"));\n\n// ReactDOM.render(<JustTesting />, document.getElementById('root'));\nconsole.log(\"It's looking like weather time\");\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}